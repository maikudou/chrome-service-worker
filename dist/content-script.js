(()=>{"use strict";var e;!function(e){e.isWelcomeMessage=function(e){return"welcome"===e.type},e.isPongMessage=function(e){return"pong"===e.type},e.isSocketMessage=function(e){return"socket"===e.type},e.isMirrorMessage=function(e){return"mirror"===e.type},e.isStartSessionMessage=function(e){return"startSession"===e.type},e.isPingMessage=function(e){return"ping"===e.type},e.isSocketSendMessage=function(e){return"socketSend"===e.type}}(e||(e={})),console.log("I am a content script");let o,s,n=5,t=Date.now();const r=function(){try{o=chrome.runtime.connect({name:"sw-connection"}),o.onDisconnect.addListener((()=>{console.log(`Worker disconnected. TTL: ${(Date.now()-t)/1e3}s`,`Error: ${chrome.runtime.lastError}`),n-- >=0&&r()})),o.onMessage.addListener((o=>{const s=JSON.parse(o);s&&function(o){e.isMirrorMessage(o)?console.log(`Recieved mirrored message: ${o.message}`):e.isPongMessage(o)?console.log("Recieved pong message"):e.isSocketMessage(o)?console.log(`Recieved message from socket: ${o.data}`):e.isWelcomeMessage(o)&&console.log("Recieved Welcome message")}(s)})),window.setTimeout((()=>{n=5}),5e3),console.log("Connected to Service Worker",(Date.now()-t)/1e3),t=Date.now(),a(o,{type:"startSession"}),i(o,1500),c(o)}catch(e){}};function c(e){s=window.setTimeout((()=>{a(o,{type:"ping"}),c(e)}),1e4+1e4*Math.random())}function i(e,n){s=window.setTimeout((()=>{a(o,{type:"socketSend",message:`Sorry, current time is ${Date.now()}`}),i(e)}),n||3e4+3e4*Math.random())}function a(e,o){try{e.postMessage(JSON.stringify(o))}catch(e){throw console.log(`Couldn't post message do to error: ${e}`),e}}r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,